<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd
        http://www.springframework.org/schema/tx 
        http://www.springframework.org/schema/tx/spring-tx-3.1.xsd">
    <!-- 事务配置 -->
    <!-- 配置扫描注解,不扫描@Controller注解 -->
    <context:component-scan base-package="com.ssm">
        <context:exclude-filter type="annotation"
            expression="org.springframework.stereotype.Controller" />
    </context:component-scan>
    
    <!-- 引入db.properties文件 -->
    <bean id="propertyConfigurer" 
        class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location" value="classpath:db.properties"/>
    </bean>
    
    <!--数据库连接池配置-->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">  
        <property name="driverClassName" value="${drivername}"/>
        <property name="url" value="${url}"/>
        <property name="username" value="${username}"/>
        <property name="password" value="${password}"/>
    </bean>
    
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 指定数据源 -->
        <property name="dataSource" ref="dataSource"/>
        <!-- 指定mybatis框架主配置文件的位置 -->
        <property name="configLocation" value="classpath:mybatis.xml"/>
        <!-- 自动扫描mapping.xml文件，**表示迭代查找 ,,也可在mybatis.xml中单独指定xml文件 -->
        <property name="mapperLocations" value="classpath:com/ssm/dao/*.xml"/>
    </bean>
    
    <!-- 自动扫描net/jy/dao下的所有dao接口，并实现这些接口，
                 可直接在程序中使用dao接口，不用再获取sqlsession对象 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- basePackage 属性是映射器接口文件的包路径。
                        你可以使用分号或逗号 作为分隔符设置多于一个的包路径-->
        <property name="basePackage" value="com/ssm/dao"/>
        <!-- 因为会自动装配 SqlSessionFactory和SqlSessionTemplate
                        所以没有必要去指定SqlSessionFactory或 SqlSessionTemplate
                        因此可省略不配置；
                        但是,如果你使用了一个以上的 DataSource，那么自动装配可能会失效。
                        这种情况下，你可以使用sqlSessionFactoryBeanName或sqlSessionTemplateBeanName属性
                        来设置正确的 bean名称来使用 -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean> 
    
     <!-- 配置事务管理器 -->
    <bean id="transactionManager"
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
    <!--  使用声明式事务 transaction-manager：引用上面定义的事务管理器 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>
   	<!-- 用于上传的配置 -->
   	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver" />
   	
</beans>




